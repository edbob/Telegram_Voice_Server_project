// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
function isAutoplayEnabled() {
    return localStorage.getItem('autoplayEnabled') !== 'false';
}

function toggleAutoplay() {
    const current = isAutoplayEnabled();
    localStorage.setItem('autoplayEnabled', (!current).toString());
    updateAutoplayButton();
}

function updateAutoplayButton() {
    const btn = document.getElementById('autoplay-toggle');
    const enabled = isAutoplayEnabled();

    btn.textContent = enabled
        ? 'üîä –ê–≤—Ç–æ–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: –í–ö–õ'
        : 'üîá –ê–≤—Ç–æ–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: –í–´–ö–õ';

    btn.classList.toggle('off', !enabled);
}

// === –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ ===
function getReadMessages() {
    const stored = localStorage.getItem('readMessages');
    return stored ? JSON.parse(stored) : [];
}

function markAsRead(filename) {
    const read = getReadMessages();
    if (!read.includes(filename)) {
        read.push(filename);
        localStorage.setItem('readMessages', JSON.stringify(read));
    }
}

// === –û—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ===
let audioQueue = [];
let isPlaying = false;

function playNextInQueue() {
    if (audioQueue.length === 0) {
        isPlaying = false;
        return;
    }

    isPlaying = true;
    const { audio, filename, div } = audioQueue.shift();

    audio.play().then(() => {
        markAsRead(filename);
        div.classList.remove('unread');
        div.classList.add('read');
    }).catch(err => {
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏:", err);
        playNextInQueue(); // –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–æ—á–Ω—ã–π –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    });

    audio.addEventListener('ended', () => {
        playNextInQueue();
    }, { once: true });
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ filename
const shownMessages = new Set();
// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ ===
async function fetchMessages() {
    const res = await fetch('/api/messages');
    const data = await res.json();

    const container = document.getElementById('messages');
    const readMessages = getReadMessages();

    shownMessages.clear();          // –æ—á–∏—â–∞–µ–º set
    container.innerHTML = '';       // –æ—á–∏—â–∞–µ–º HTML

    data.forEach((msg, index) => {
        if (shownMessages.has(msg.filename)) return;

        const isRead = readMessages.includes(msg.filename);

        const div = document.createElement('div');
        div.className = 'message ' + (isRead ? 'read' : 'unread');

        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML
        let audioHTML = '';
        if (msg.url) {
            audioHTML = `<audio controls src="${msg.url}"></audio><br>`;
        } else {
            audioHTML = `<div class="no-audio">üîá –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>`;
        }

        div.innerHTML = `
            <p class="preview" style="cursor:pointer;">${msg.preview}</p>
            <p class="full-message" style="display:none;">${msg.full_message}</p>
            ${audioHTML}
            <span class="date">ID: ${msg.id} | –î–æ–±–∞–≤–ª–µ–Ω–æ: ${msg.date} | –ò—Å—Ç–æ—á–Ω–∏–∫: ${msg.source || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
        `;

        container.appendChild(div); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const previewEl = div.querySelector('.preview');
        const fullEl = div.querySelector('.full-message');
        const audio = div.querySelector('audio');

        previewEl.addEventListener('click', () => {
            const isVisible = fullEl.style.display === 'block';
            fullEl.style.display = isVisible ? 'none' : 'block';
            previewEl.style.fontWeight = isVisible ? 'normal' : 'bold';
        });

        if (audio) {
            // –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if (index === 0 && !isRead && isAutoplayEnabled()) {
                audio.play().then(() => {
                    markAsRead(msg.filename);
                    div.classList.remove('unread');
                    div.classList.add('read');
                }).catch(err => console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏:", err));
            }

            // –†—É—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            audio.addEventListener('play', () => {
                if (!readMessages.includes(msg.filename)) {
                    markAsRead(msg.filename);
                    div.classList.remove('unread');
                    div.classList.add('read');
                }
            });
        }

        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω–Ω–æ–µ
        shownMessages.add(msg.filename);
    });

    if (isAutoplayEnabled() && !isPlaying) {
        playNextInQueue();
    }
}

// === SSE ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö ===
const eventSource = new EventSource('/events');
eventSource.onmessage = function(event) {
    if (event.data === 'new_message') {
        fetchMessages();
    }
};

// === PWA ‚Äî Service Worker ===
if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/static/sw.js')
        .then(() => console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'))
        .catch(console.error);
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ===
document.getElementById('autoplay-toggle').addEventListener('click', toggleAutoplay);

// === –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ===
updateAutoplayButton();
fetchMessages();