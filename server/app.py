from flask import Flask, request, render_template, jsonify, send_from_directory
import os
import sys
import shutil
from datetime import datetime
from flask import Response
from queue import Queue
import sqlite3
import io
import threading
import time
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
from cleanup import cleanup
from bot.processor import TextProcessor

app = Flask(__name__, static_folder='static', template_folder='templates')

UPLOAD_FOLDER = os.path.join(app.root_path, 'uploads')

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def background_cleanup():
    while True:
        print("üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        cleanup()
        time.sleep(24 * 60 * 60)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

@app.route('/manifest.json')
def manifest():
    return send_from_directory(os.path.join(app.root_path, 'static'), 'manifest.json')

@app.route('/sw.js')
def sw():
    return send_from_directory(os.path.join(app.root_path, 'static'), 'sw.js')

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(
        os.path.join(app.root_path, 'static'),
        'favicon.ico',
        mimetype='image/vnd.microsoft.icon'
    )

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/server/uploads/<path:filename>')
def uploaded_file(filename):
    return send_from_directory(os.path.join(app.root_path, 'uploads'), filename)

@app.route('/api/messages')
def get_messages():
    DB_PATH = os.path.join(app.root_path, '..', 'bot', 'messages.db')
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    c = conn.cursor()

    try:
        c.execute('''
            SELECT id, filename, message, date, source 
            FROM messages 
            ORDER BY id DESC 
            LIMIT 10
        ''')
        rows = c.fetchall()
    finally:
        conn.close()

    messages = []
    for row in rows:
        filename = row['filename']
        file_path = None
        need_update_db = False

        # –µ—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
        if not filename:
            filename = f"voice_{row['id']}.mp3"
            file_path = os.path.join(UPLOAD_FOLDER, filename)
            need_update_db = True
        else:
            file_path = os.path.join(UPLOAD_FOLDER, filename)

        # –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Üí –æ–∑–≤—É—á–∏–≤–∞–µ–º
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}. –û–∑–≤—É—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
            try:
                from gtts import gTTS
                text = row['message'] or ''
                tts = gTTS(text, lang='ru')
                tts.save(file_path)
                print(f"‚úÖ –§–∞–π–ª –æ–∑–≤—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")
                need_update_db = True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")

        # –µ—Å–ª–∏ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª ‚Äî –æ–±–Ω–æ–≤–∏–º –±–∞–∑—É
        if need_update_db:
            try:
                conn = sqlite3.connect(DB_PATH)
                conn.execute("UPDATE messages SET filename = ? WHERE id = ?", (filename, row['id']))
                conn.commit()
                conn.close()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã: {e}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑—ã!
        created = row['date'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        try:
            full_message = TextProcessor.clean(row['message'] or '')
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            full_message = row['message'] or ''

        preview = (full_message[:50] + '‚Ä¶') if len(full_message) > 50 else full_message

        messages.append({
            'id': row['id'],
            'filename': filename if os.path.exists(file_path) else None,
            'url': f'/server/uploads/{filename}' if os.path.exists(file_path) else None,
            'date': created,
            'source': row['source'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            'preview': preview,
            'full_message': full_message,
            'has_audio': os.path.exists(file_path)
        })

    return jsonify(messages)

subscribers = []

@app.route('/events')
def sse():
    def event_stream(q):
        while True:
            data = q.get()
            yield f"data: {data}\n\n"

    q = Queue()
    subscribers.append(q)
    return Response(event_stream(q), mimetype="text/event-stream")

def notify_clients():
    for q in subscribers:
        q.put('new_message')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return '–ù–µ—Ç —Ñ–∞–π–ª–∞!', 400

    file = request.files['file']
    if file.filename == '':
        return '–ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞', 400

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ uploads/
    save_path = os.path.join(UPLOAD_FOLDER, file.filename)
    file.save(save_path)

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {save_path}")
    notify_clients()
    return '–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω', 200

if __name__ == "__main__":
    threading.Thread(target=background_cleanup, daemon=True).start()
    app.run(debug=True)