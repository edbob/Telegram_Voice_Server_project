import os
import asyncio
import time
from gtts import gTTS
from telethon import TelegramClient, events
from telethon.tl.types import PeerChannel
from bot.db import MessageDB
from bot.processor import TextProcessor
import datetime

class TelegramVoiceBot:
    def __init__(self, api_id, api_hash, phone, source_channels, db_file, target_chat):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.source_channels = source_channels
        self.db = MessageDB(db_file)
        self.client = TelegramClient('bot_session', api_id, api_hash)
        self.queue = asyncio.Queue()
        self.target_chat = target_chat

    async def start(self):
        await self.client.start(phone=self.phone)
        now = datetime.datetime.now().strftime('%H:%M %d.%m.%Y')
        print(f"\n‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {now} –∏ —Å–ª—É—à–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
        try:
            entities = []
            for ch_id in self.source_channels:
                entity = await self.client.get_entity(PeerChannel(ch_id))
                print(f"üîó –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {entity.title} (ID: {entity.id})")
                entities.append(entity)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
            if "disk I/O error" in str(e):
                print("‚û°Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–∏, —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –≤ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.")
            return
        
        # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
        @self.client.on(events.NewMessage(chats=entities))
        async def handler(event):
            msg = event.message
            print(f"\n[{msg.date}] {msg.sender_id}: {msg.text}")

            try:
                chat = await event.get_chat()
                source = chat.title if hasattr(chat, 'title') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                filename = f"voice_{int(time.time())}.ogg"
            except:
                source = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            self.db.save_message(
                sender_id=msg.sender_id,
                message=msg.text, 
                date=msg.date.isoformat(),
                source=source,
                filename=filename
            )

            clean_text = TextProcessor.clean(msg.text)
            if not clean_text.strip():
                print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                return

            lang = TextProcessor.detect_lang(clean_text)
            await self.queue.put((clean_text, lang, filename))

        # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —É—Ö–æ–¥–æ–≤ ===
        @self.client.on(events.ChatAction)
        async def membership_handler(event):
            user = await event.get_user()
            if user:
                username = f"@{user.username}" if user.username else (user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            else:
                username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

            if event.user_joined or event.user_added:
                print(f"üëã {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É.")
                await event.reply(f"–ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã")
                self.db.save_stat(event.chat_id, user.id if user else 0, "joined")

            elif event.user_left or event.user_kicked:
                print(f"üò¢ {username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
                await event.reply(f"{username}, –∂–∞–ª—å —á—Ç–æ —Ç—ã –ø–æ–∫–∏–¥–∞–µ—à—å –Ω–∞—Å üò¢. –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?")
                self.db.save_stat(event.chat_id, user.id if user else 0, "left")

        asyncio.create_task(self.voice_worker())
        await self.client.run_until_disconnected()

    async def voice_worker(self):
        import requests
        while True:
            clean_text, lang, filename = await self.queue.get()

            tts = gTTS(text=clean_text, lang=lang, slow=False)
            mp3_path = "voice.mp3"
            ogg_path = f"voice_{int(time.time())}.ogg"

            tts.save(mp3_path)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            os.system(f'ffmpeg -y -i {mp3_path} -c:a libopus {ogg_path}')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if not os.path.exists(ogg_path) or os.path.getsize(ogg_path) == 0:
                print("‚ùå –§–∞–π–ª ogg –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π!")
            else:
                print(f"‚úÖ –§–∞–π–ª ogg —Å–æ–∑–¥–∞–Ω: {ogg_path}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(ogg_path)} –±–∞–π—Ç")

            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram .ogg —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
                await self.client.send_file(
                    self.target_chat,
                    ogg_path,
                    voice_note=True,
                    caption=clean_text[:200]  # –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
                )
                print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                with open(ogg_path, 'rb') as f:
                    try:
                        response = requests.post("http://localhost:5000/upload", files={'file': (ogg_path, f)})
                        response.raise_for_status()
                        print(f"üåç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                    except requests.exceptions.RequestException as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")
                        if response is not None:
                            print(f"üîÅ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                            print(f"üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

            finally:
                for f in (mp3_path, ogg_path):
                    if os.path.exists(f):
                        os.remove(f)

            self.queue.task_done()