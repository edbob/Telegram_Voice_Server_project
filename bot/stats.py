from datetime import datetime, timedelta
import matplotlib.pyplot as plt

class StatsProcessor:
    def __init__(self, db):
        """
        db ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç MessageDB
        """
        self.db = db

        # –°—Ç–µ–º—ã (–ª–æ–≤—è—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã: —Ç—Ä–µ–≤–æ–≥–∞/—Ç—Ä–µ–≤–æ–∂–Ω–∞—è, —Ç—Ä–∏–≤–æ–≥–∞/–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞, "–≤–æ–∑–¥—É—à–∫–∞" –∏ —Ç.–ø.)
        self.alert_stems = ["—Ç—Ä–µ–≤–æ–≥", "—Ç—Ä–∏–≤–æ–≥", "–ø–æ–≤i—Ç—Ä", "–ø–æ–≤—ñ—Ç—Ä", "–≤–æ–∑–¥—É—à", "üö®"]
        self.clear_stems = ["–æ—Ç–±–æ–π", "–≤—ñ–¥–±—ñ–π", "–≤—ñ–¥–±i–π", "—Å–∫–∞—Å—É–≤", "all clear", "–≤—ñ–¥–º—ñ–Ω–∞"]

        # –§—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Å—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–º "–æ—Ç–±–æ–µ–º"
        self.clear_blacklist = [
            "–æ–∂–∏–¥–∞–µ–º –æ—Ç–±–æ–π", "–∂–¥—ë–º –æ—Ç–±–æ–π", "–∂–¥–µ–º –æ—Ç–±–æ–π", "–æ–∂–∏–¥–∞–µ–º", "–æ–∂–∏–¥–∞–µ–º –æ—Ç–º–µ–Ω—É"
        ]

    @staticmethod
    def _parse_dt(s: str):
        if not s:
            return None
        s = s.strip()
        # ISO: 2025-07-24T14:30:01+00:00 –∏–ª–∏ ...Z
        if "T" in s:
            try:
                return datetime.fromisoformat(s.replace("Z", "+00:00")).replace(tzinfo=None)
            except Exception:
                pass
        # DD.MM.YYYY HH:MM[:SS]
        for fmt in ("%d.%m.%Y %H:%M:%S", "%d.%m.%Y %H:%M"):
            try:
                return datetime.strptime(s, fmt)
            except Exception:
                continue
        return None

    def _is_alert_like(self, text: str) -> bool:
        t = (text or "").lower()
        return any(st in t for st in self.alert_stems)

    def _is_clear_like(self, text: str) -> bool:
        t = (text or "").lower()
        if any(bad in t for bad in self.clear_blacklist):
            return False
        return any(st in t for st in self.clear_stems)

    def _load_messages_period(self, days: int):
        """
        –ë–µ—Ä—ë–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î, –ø–∞—Ä—Å–∏–º –¥–∞—Ç—ã –≤ Python,
        —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ–∫–Ω—É now-<days>..now.
        """
        now = datetime.now()
        start = now - timedelta(days=days)
        rows = self.db.get_all_messages()

        parsed = []
        for _id, msg, date_str in rows:
            ts = self._parse_dt(date_str)
            if ts is None:
                continue
            if start <= ts <= now:
                parsed.append((_id, ts, msg or ""))

        parsed.sort(key=lambda x: x[1])  # –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        return parsed, start, now

    def get_air_alert_stats(self, period='day'):
        if period == 'day':
            days = 1
        elif period == 'week':
            days = 7
        elif period == 'month':
            days = 30
        else:
            raise ValueError("Unsupported period")

        rows, start_dt, now = self._load_messages_period(days)

        intervals = []
        alert_start = None

        for _id, ts, text in rows:
            if alert_start is None and self._is_alert_like(text):
                alert_start = ts
                continue
            if alert_start is not None and self._is_clear_like(text):
                duration = (ts - alert_start).total_seconds() / 60.0
                if 0 < duration < 12 * 60:  # –æ—Ç—Å–µ—á—ë–º –∞–Ω–æ–º–∞–ª–∏–∏ > 12—á
                    intervals.append((alert_start, ts, duration))
                alert_start = None

        # –ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
        if alert_start is not None:
            duration = (now - alert_start).total_seconds() / 60.0
            intervals.append((alert_start, now, duration))

        total_alerts = len(intervals)
        total_minutes = round(sum(d for _, _, d in intervals))
        avg_minutes = round(total_minutes / total_alerts) if total_alerts else 0

        return {
            'count': total_alerts,
            'total_minutes': total_minutes,
            'avg_minutes': avg_minutes,
            'last_alert': intervals[-1][0].strftime('%H:%M %d.%m.%Y') if intervals else '‚Äî',
            'last_clear': intervals[-1][1].strftime('%H:%M %d.%m.%Y') if intervals else '‚Äî',
            'intervals': [
                {
                    'start': a.strftime('%Y-%m-%d %H:%M'),
                    'end': b.strftime('%Y-%m-%d %H:%M'),
                    'minutes': round(d)
                } for a, b, d in intervals
            ]
        }

    def get_alerts_per_day(self, days=7):
        """
        –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–≤–æ–≥ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π.
        """
        rows, start, now = self._load_messages_period(days)
        counts = {}

        for _id, ts, text in rows:
            if self._is_alert_like(text):
                d = ts.strftime("%Y-%m-%d")
                counts[d] = counts.get(d, 0) + 1

        return counts

def plot_alerts_per_day(alerts: dict, filename="stats.png"):
    if not alerts:
        return None  # –Ω–µ—á–µ–≥–æ —Ä–∏—Å–æ–≤–∞—Ç—å

    dates = list(alerts.keys())
    values = list(alerts.values())

    plt.figure(figsize=(8,4))
    plt.bar(dates, values, color="red")
    plt.xticks(rotation=45, ha="right")
    plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–≤–æ–≥ –ø–æ –¥–Ω—è–º")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–≤–æ–≥")
    plt.tight_layout()

    plt.savefig(filename)
    plt.close()
    return filename