from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, ConversationHandler, filters
import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from bot.weather import get_weather


ADMIN_CHAT_ID = 27893983  # Telegram ID
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
SEND_ADMIN_MESSAGE = range(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É", callback_data='msg_admin')],
        [InlineKeyboardButton("üå§ –ü–æ–≥–æ–¥–∞", callback_data='weather')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data='advertise')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'msg_admin':
        context.user_data['awaiting_admin_msg'] = True
        await query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω—É.")
        return SEND_ADMIN_MESSAGE
    
    elif query.data == 'weather':
        weather_info = get_weather()
        await query.message.reply_text(weather_info)
    elif query.data == 'stats':
        await query.message.reply_text("üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è: 123 —Å–æ–æ–±—â–µ–Ω–∏—è\n(–≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –≥—Ä–∞—Ñ–∏–∫).")
    elif query.data == 'advertise':
        await query.message.reply_text("üì¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã —Å—Ç–æ–∏—Ç 100‚Ç¥. –ù–∞–ø–∏—à–∏ '–î–∞', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    msg = f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n\n{text}"
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")
    return ConversationHandler.END

# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    from telegram.ext import ApplicationBuilder

    TOKEN = "7152007094:AAE3yHERr4WuVMvkLa-inKQL1xQsqFN0fmQ" # –¢–æ–∫–µ–Ω –±–æ—Ç–∞

    app = ApplicationBuilder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_button)],
        states={
            SEND_ADMIN_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_message)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_message))

    print("ü§ñ –ú–µ–Ω—é-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == '__main__':
    main()